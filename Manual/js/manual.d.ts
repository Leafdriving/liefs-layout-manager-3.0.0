declare class CSS {
    static h1: Css;
    static h1h: Css;
    static p: Css;
    static codeblock: Css;
    static inset: Css;
    static insetLarge: Css;
    static slideTree: Css;
    static cssNode: Css;
    static menuButton: Css;
    static bgBlue: Css;
    static bgGreen: Css;
    static bgRed: Css;
    static bgBlack: Css;
    static bgLBlue: Css;
    static bgLBlue2: Css;
    static outline: Css;
    static textWhite: Css;
    static textBlue: Css;
    static textBlueLink: Css;
    static textCenter: Css;
    static textBlack: Css;
    static cssTitle: Css;
    static cssBold: Css;
    static centerText: Css;
    static leftText: Css;
    static link: Css;
    static centerButton: Css;
    static menu_SVG(size?: number, color?: string): string;
}
declare let bgLightBorder: Css;
declare class CodeBlock extends Base {
    static labelNo: number;
    static instances: CodeBlock[];
    static activeInstances: CodeBlock[];
    static defaults: {};
    static argMap: {
        string: string[];
    };
    label: string;
    javascript: string;
    html: string;
    displaycell: DisplayCell;
    handler: Handler;
    pages: Pages;
    pagesDisplayCell: DisplayCell;
    constructor(...Arguments: any);
}
declare var Prism: any;
declare let clickTreeItemEvent: Events;
declare function header(label: string, index: number, size?: number): DisplayCell;
declare let gotoPage: (PageName: string) => Events;
declare let pagesNode: node_;
declare let makearray: (name: string, num?: number) => any;
declare let pagesArray: DisplayCell[];
declare let counter: number;
declare let MainPages: DisplayCell;
declare let mainTree: DisplayCell;
declare let slideTree: DisplayCell;
declare let LargeScreen: DisplayCell;
declare let MenuSvgSize: number;
declare let SmallScreen: DisplayCell;
declare let slideMenu: Handler;
declare let sizeFunction: (thisPages: Pages) => number;
